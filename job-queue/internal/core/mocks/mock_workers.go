// Code generated by MockGen. DO NOT EDIT.
// Source: ./workers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/tsetsik/go-examples/job-queue/internal/core"
)

// MockJobWorker is a mock of JobWorker interface.
type MockJobWorker struct {
	ctrl     *gomock.Controller
	recorder *MockJobWorkerMockRecorder
}

// MockJobWorkerMockRecorder is the mock recorder for MockJobWorker.
type MockJobWorkerMockRecorder struct {
	mock *MockJobWorker
}

// NewMockJobWorker creates a new mock instance.
func NewMockJobWorker(ctrl *gomock.Controller) *MockJobWorker {
	mock := &MockJobWorker{ctrl: ctrl}
	mock.recorder = &MockJobWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobWorker) EXPECT() *MockJobWorkerMockRecorder {
	return m.recorder
}

// Enqueue mocks base method.
func (m *MockJobWorker) Enqueue(job *core.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockJobWorkerMockRecorder) Enqueue(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockJobWorker)(nil).Enqueue), job)
}

// Start mocks base method.
func (m *MockJobWorker) Start(fn core.ProcessedJobFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", fn)
}

// Start indicates an expected call of Start.
func (mr *MockJobWorkerMockRecorder) Start(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockJobWorker)(nil).Start), fn)
}

// Stop mocks base method.
func (m *MockJobWorker) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockJobWorkerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockJobWorker)(nil).Stop))
}
